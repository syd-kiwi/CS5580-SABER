module SABER2 where

pack : [8][1] -> [8]
pack bits = foldl (\x y -> (x << 1) ^ y) 0 bits

zero_extend : {a, b} (fin a, fin b, b >= a) => [a] -> [b]
zero_extend x = zero # x

//Ensure correct definition for missing variables
a_ij : PolyQ
a_ij = zero

one_poly_bytes : Integer
one_poly_bytes = 13 * SABER_N_value / 8

// ============================
// 1️⃣  PARAMETERS & TYPE DEFINITIONS
// ============================

SABER_N_value : Integer
SABER_N_value = 256

SABER_K_value : Integer
SABER_K_value = 3

SABER_Q_value : Integer
SABER_Q_value = 8192

SEEDBYTES_value : Integer
SEEDBYTES_value = 32

type PolyQ = [SABER_N_value][16]   // Polynomial mod Q
type MatrixPolyQ = [SABER_K_value][SABER_K_value]PolyQ
type PolyVec = [SABER_K_value]PolyQ

// ============================
// 2️⃣  HELPER FUNCTIONS (Packing/Unpacking)
// ============================

BytesPerPoly = 13 * (SABER_N_value / 8)

byte_bank_length : Integer
byte_bank_length = SABER_K_value * SABER_K_value * one_poly_bytes

offset = (i * SABER_K_value + j) * one_poly_bytes

buf : [byte_bank_length][8]
buf = take byte_bank_length (repeat 0)  -- Fixed undefined variable

POL2MSG : [SABER_N_value][16] -> [SABER_KEYBYTES][8]
POL2MSG poly = [ pack [ (poly ! (8*j + i)) && 0x1 | i <- [0 .. 7] ] | j <- [0 .. SABER_KEYBYTES - 1] ]

MSG2POL : [SABER_KEYBYTES][8] -> [SABER_N_value][16]
MSG2POL msg = join [ [ zero_extend ((msg!j) >> i) && 0x1 | i <- [0 .. 7] ] | j <- [0 .. SABER_KEYBYTES - 1] ]

// ============================
// 3️⃣  POLYNOMIAL OPERATIONS
// ============================

polyAdd p1 p2 = [ (x + y) % SABER_Q_value | x <- p1 | y <- p2 ]
polySub p1 p2 = [ (x + SABER_Q_value - y) % SABER_Q_value | x <- p1 | y <- p2 ]

polyMul p1 p2 = [ reduceCoeff k | k <- [0 .. SABER_N_value - 1] ]

polyScalarMul s p = [ (coeff * s) % SABER_Q_value | coeff <- p ]

// ============================
// 4️⃣  MATRIX OPERATIONS
// ============================

matrixVectorMul : MatrixPolyQ -> PolyVec -> PolyVec
matrixVectorMul a v = [ foldl polyAdd zero [polyMul a_ij vj | a_i <- a | vj <- v] | a <- a ]

// ============================
// 5️⃣  KEY GENERATION
// ============================

GenMatrix : [SEEDBYTES_value][8] -> MatrixPolyQ
GenMatrix seed = [ [ gen_poly i j | j <- [0 .. SABER_K_value - 1] ] | i <- [0 .. SABER_K_value - 1] ]

gen_poly : {i, j} (fin i, fin j) => Integer -> Integer -> PolyQ
gen_poly i j = BS2POLq (take one_poly_bytes (drop offset buf))
  where
    offset = (i * SABER_K_value + j) * one_poly_bytes

// indcpa_keypair : ([SEEDBYTES_value][8], [NOISESEEDBYTES][8]) -> ([CIPHERTEXT_BYTES][8], [CIPHERTEXT_BYTES][8])
// sk = [zero : PolyQ | _ <- [0 .. SABER_K_value-1]]

a_matrix = GenMatrix (take SEEDBYTES_value pk)  -- Renamed `a` to `a_matrix` to avoid shadowing

sk' = [zero : PolyQ | _ <- [0 .. SABER_K_value-1]]

// ============================
// 6️⃣  ENCRYPTION & DECRYPTION
// ============================

indcpa_kem_enc :
  ([SABER_K_valueEYBYTES][8], [NOISESEEDBYTES_value][8], [CIPHERTEXT_BYTES][8]) -> [CIPHERTEXT_BYTES][8]
indcpa_kem_enc (msg, noiseSeed, pk) = ciphertext
  where
    a   = GenMatrix (take SEEDBYTES_value pk)
    sk' = [zero : PolyQ | _ <- [0 .. SABER_K_value-1]]
    b'  = matrixVectorMul a sk'
    v'  = polyMul (join pk) (join sk')
    ciphertext = POL2MSG (polyAdd (MSG2POL msg) v')
