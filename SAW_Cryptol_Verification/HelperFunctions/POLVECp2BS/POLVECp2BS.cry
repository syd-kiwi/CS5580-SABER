module POLVECp2BS where

type Coeff = [11]
type Byte  = [8]

type SABER_K = 3
type SABER_N = 256

// Input: 3 x 256 polynomial vector with 11-bit coefficients
// Output: packed 1056-byte stream
POLVECp2BS : [SABER_K][SABER_N]Coeff -> [1056]Byte
POLVECp2BS pols = dropBytes (join packedBits)
  where
    allCoeffs : [SABER_K * SABER_N]Coeff
    allCoeffs = join pols

    allBits : [SABER_K * SABER_N * 11]Bit
    allBits = join [zero # c | c <- allCoeffs]  // pad each 11-bit coeff to 16 bits first, then drop

    packedBits : [1056][8]
    packedBits = groupBy`{8} allBits

    dropBytes : [1056][8] -> [1056][8]
    dropBytes xs = xs  // identity â€” left in case you want to post-process
