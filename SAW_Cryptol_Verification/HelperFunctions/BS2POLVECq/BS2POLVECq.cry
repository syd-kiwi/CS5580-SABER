module BS2POLVECq where

type Byte = [8]
type Coeff = [13]

type SABER_K = 3
type SABER_N = 256

// Main unpacking function: 1040 bytes â†’ 3 x 256 13-bit coefficients
bs2polvecq : [1040]Byte -> [SABER_K][SABER_N]Coeff
bs2polvecq bytes = [ join [ extract bytes i j | j <- [0 .. 63] ] | i <- [0 .. 2] ]

extract : [1040][8] -> Integer -> Integer -> [4][13]
extract bytes i j = [c0, c1, c2, c3]
  where
    offset = i * 416 + 5 * j
    b0 = bytes @ offset
    b1 = bytes @ (offset + 1)
    b2 = bytes @ (offset + 2)
    b3 = bytes @ (offset + 3)
    b4 = bytes @ (offset + 4)

    allBits : [40]
    allBits = b0 # b1 # b2 # b3 # b4

    c0 = take`{13} (drop`{0}  allBits)
    c1 = take`{13} (drop`{13} allBits)
    c2 = take`{13} (drop`{26} allBits)
    c3 = take`{13} (drop`{39} (allBits # (zero : [12])))

// Pad each 13-bit coeff to 16 bits to match C output type
bs2polvecq_u16 : [1040][8] -> [3][256][16]
bs2polvecq_u16 bytes = [[ zero # coeff | coeff <- row ] | row <- bs2polvecq bytes]
